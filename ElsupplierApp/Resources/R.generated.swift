//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 6 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `DarkBlue`.
    static let darkBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "DarkBlue")
    /// Color `IceBlue`.
    static let iceBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "IceBlue")
    /// Color `LightBlue`.
    static let lightBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "LightBlue")
    /// Color `LightRed`.
    static let lightRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "LightRed")
    /// Color `SteelGrey`.
    static let steelGrey = Rswift.ColorResource(bundle: R.hostingBundle, name: "SteelGrey")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DarkBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "IceBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func iceBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.iceBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LightBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LightRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SteelGrey", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func steelGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.steelGrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DarkBlue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func darkBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.darkBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "IceBlue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func iceBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.iceBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LightBlue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LightRed", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightRed(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightRed.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SteelGrey", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func steelGrey(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.steelGrey.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 8 files.
  struct file {
    /// Resource file `Cairo-Black.ttf`.
    static let cairoBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-Black", pathExtension: "ttf")
    /// Resource file `Cairo-Bold.ttf`.
    static let cairoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-Bold", pathExtension: "ttf")
    /// Resource file `Cairo-ExtraBold.ttf`.
    static let cairoExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-ExtraBold", pathExtension: "ttf")
    /// Resource file `Cairo-ExtraLight.ttf`.
    static let cairoExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-ExtraLight", pathExtension: "ttf")
    /// Resource file `Cairo-Light.ttf`.
    static let cairoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-Light", pathExtension: "ttf")
    /// Resource file `Cairo-Medium.ttf`.
    static let cairoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-Medium", pathExtension: "ttf")
    /// Resource file `Cairo-Regular.ttf`.
    static let cairoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-Regular", pathExtension: "ttf")
    /// Resource file `Cairo-SemiBold.ttf`.
    static let cairoSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-SemiBold", pathExtension: "ttf")

    /// `bundle.url(forResource: "Cairo-Black", withExtension: "ttf")`
    static func cairoBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cairo-Bold", withExtension: "ttf")`
    static func cairoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cairo-ExtraBold", withExtension: "ttf")`
    static func cairoExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cairo-ExtraLight", withExtension: "ttf")`
    static func cairoExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cairo-Light", withExtension: "ttf")`
    static func cairoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cairo-Medium", withExtension: "ttf")`
    static func cairoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cairo-Regular", withExtension: "ttf")`
    static func cairoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cairo-SemiBold", withExtension: "ttf")`
    static func cairoSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 8 fonts.
  struct font: Rswift.Validatable {
    /// Font `Cairo-Black`.
    static let cairoBlack = Rswift.FontResource(fontName: "Cairo-Black")
    /// Font `Cairo-Bold`.
    static let cairoBold = Rswift.FontResource(fontName: "Cairo-Bold")
    /// Font `Cairo-ExtraBold`.
    static let cairoExtraBold = Rswift.FontResource(fontName: "Cairo-ExtraBold")
    /// Font `Cairo-ExtraLight`.
    static let cairoExtraLight = Rswift.FontResource(fontName: "Cairo-ExtraLight")
    /// Font `Cairo-Light`.
    static let cairoLight = Rswift.FontResource(fontName: "Cairo-Light")
    /// Font `Cairo-Medium`.
    static let cairoMedium = Rswift.FontResource(fontName: "Cairo-Medium")
    /// Font `Cairo-Regular`.
    static let cairoRegular = Rswift.FontResource(fontName: "Cairo-Regular")
    /// Font `Cairo-SemiBold`.
    static let cairoSemiBold = Rswift.FontResource(fontName: "Cairo-SemiBold")

    /// `UIFont(name: "Cairo-Black", size: ...)`
    static func cairoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoBlack, size: size)
    }

    /// `UIFont(name: "Cairo-Bold", size: ...)`
    static func cairoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoBold, size: size)
    }

    /// `UIFont(name: "Cairo-ExtraBold", size: ...)`
    static func cairoExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoExtraBold, size: size)
    }

    /// `UIFont(name: "Cairo-ExtraLight", size: ...)`
    static func cairoExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoExtraLight, size: size)
    }

    /// `UIFont(name: "Cairo-Light", size: ...)`
    static func cairoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoLight, size: size)
    }

    /// `UIFont(name: "Cairo-Medium", size: ...)`
    static func cairoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoMedium, size: size)
    }

    /// `UIFont(name: "Cairo-Regular", size: ...)`
    static func cairoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoRegular, size: size)
    }

    /// `UIFont(name: "Cairo-SemiBold", size: ...)`
    static func cairoSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoSemiBold, size: size)
    }

    static func validate() throws {
      if R.font.cairoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-Black' could not be loaded, is 'Cairo-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-Bold' could not be loaded, is 'Cairo-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-ExtraBold' could not be loaded, is 'Cairo-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-ExtraLight' could not be loaded, is 'Cairo-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-Light' could not be loaded, is 'Cairo-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-Medium' could not be loaded, is 'Cairo-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-Regular' could not be loaded, is 'Cairo-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-SemiBold' could not be loaded, is 'Cairo-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 81 images.
  struct image {
    /// Image `Call`.
    static let call = Rswift.ImageResource(bundle: R.hostingBundle, name: "Call")
    /// Image `Delete post`.
    static let deletePost = Rswift.ImageResource(bundle: R.hostingBundle, name: "Delete post")
    /// Image `Screen Shot 2022-04-12 at 9.51.08 PM`.
    static let screenShot20220412At95108PM = Rswift.ImageResource(bundle: R.hostingBundle, name: "Screen Shot 2022-04-12 at 9.51.08 PM")
    /// Image `Screen Shot 2022-04-16 at 10.14.17 AM`.
    static let screenShot20220416At101417AM = Rswift.ImageResource(bundle: R.hostingBundle, name: "Screen Shot 2022-04-16 at 10.14.17 AM")
    /// Image `Screen Shot 2022-04-16 at 10.18.14 AM`.
    static let screenShot20220416At101814AM = Rswift.ImageResource(bundle: R.hostingBundle, name: "Screen Shot 2022-04-16 at 10.18.14 AM")
    /// Image `Screen Shot 2022-04-16 at 12.39.35 AM`.
    static let screenShot20220416At123935AM = Rswift.ImageResource(bundle: R.hostingBundle, name: "Screen Shot 2022-04-16 at 12.39.35 AM")
    /// Image `add comment`.
    static let addComment = Rswift.ImageResource(bundle: R.hostingBundle, name: "add comment")
    /// Image `add to fav`.
    static let addToFav = Rswift.ImageResource(bundle: R.hostingBundle, name: "add to fav")
    /// Image `addedToFav`.
    static let addedToFav = Rswift.ImageResource(bundle: R.hostingBundle, name: "addedToFav")
    /// Image `appLogo`.
    static let appLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "appLogo")
    /// Image `arrow-circle-down`.
    static let arrowCircleDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-circle-down")
    /// Image `arrow-left_3`.
    static let arrowLeft_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-left_3")
    /// Image `arrow-left`.
    static let arrowLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-left")
    /// Image `back arrow`.
    static let backArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "back arrow")
    /// Image `blue down arrow`.
    static let blueDownArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "blue down arrow")
    /// Image `cart active`.
    static let cartActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart active")
    /// Image `cart no item`.
    static let cartNoItem = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart no item")
    /// Image `cart`.
    static let cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart")
    /// Image `change password`.
    static let changePassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "change password")
    /// Image `close arrow`.
    static let closeArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "close arrow")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `del`.
    static let del = Rswift.ImageResource(bundle: R.hostingBundle, name: "del")
    /// Image `done`.
    static let done = Rswift.ImageResource(bundle: R.hostingBundle, name: "done")
    /// Image `drop arrow`.
    static let dropArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "drop arrow")
    /// Image `edit_ic`.
    static let edit_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_ic")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `empty-wallet`.
    static let emptyWallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty-wallet")
    /// Image `fav active`.
    static let favActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav active")
    /// Image `fav prod`.
    static let favProd = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav prod")
    /// Image `fav supplier`.
    static let favSupplier = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav supplier")
    /// Image `fav`.
    static let fav = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav")
    /// Image `fb`.
    static let fb = Rswift.ImageResource(bundle: R.hostingBundle, name: "fb")
    /// Image `heart`.
    static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart")
    /// Image `home active`.
    static let homeActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "home active")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `like`.
    static let like = Rswift.ImageResource(bundle: R.hostingBundle, name: "like")
    /// Image `liked`.
    static let liked = Rswift.ImageResource(bundle: R.hostingBundle, name: "liked")
    /// Image `location`.
    static let location = Rswift.ImageResource(bundle: R.hostingBundle, name: "location")
    /// Image `logout_ic`.
    static let logout_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout_ic")
    /// Image `mail blue`.
    static let mailBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "mail blue")
    /// Image `mail`.
    static let mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "mail")
    /// Image `minus_ic`.
    static let minus_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "minus_ic")
    /// Image `my msg`.
    static let myMsg = Rswift.ImageResource(bundle: R.hostingBundle, name: "my msg")
    /// Image `my orders`.
    static let myOrders = Rswift.ImageResource(bundle: R.hostingBundle, name: "my orders")
    /// Image `my pay`.
    static let myPay = Rswift.ImageResource(bundle: R.hostingBundle, name: "my pay")
    /// Image `my posts`.
    static let myPosts = Rswift.ImageResource(bundle: R.hostingBundle, name: "my posts")
    /// Image `my tenders`.
    static let myTenders = Rswift.ImageResource(bundle: R.hostingBundle, name: "my tenders")
    /// Image `no_addresses`.
    static let no_addresses = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_addresses")
    /// Image `no_fav_products`.
    static let no_fav_products = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_fav_products")
    /// Image `no_fav_suppliers`.
    static let no_fav_suppliers = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_fav_suppliers")
    /// Image `no_orders`.
    static let no_orders = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_orders")
    /// Image `no_payments`.
    static let no_payments = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_payments")
    /// Image `no_tendrs`.
    static let no_tendrs = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_tendrs")
    /// Image `notifications`.
    static let notifications = Rswift.ImageResource(bundle: R.hostingBundle, name: "notifications")
    /// Image `off`.
    static let off = Rswift.ImageResource(bundle: R.hostingBundle, name: "off")
    /// Image `on`.
    static let on = Rswift.ImageResource(bundle: R.hostingBundle, name: "on")
    /// Image `password changed`.
    static let passwordChanged = Rswift.ImageResource(bundle: R.hostingBundle, name: "password changed")
    /// Image `phone active`.
    static let phoneActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone active")
    /// Image `phone`.
    static let phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone")
    /// Image `picture`.
    static let picture = Rswift.ImageResource(bundle: R.hostingBundle, name: "picture")
    /// Image `plus_ic`.
    static let plus_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus_ic")
    /// Image `posts active`.
    static let postsActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "posts active")
    /// Image `posts`.
    static let posts = Rswift.ImageResource(bundle: R.hostingBundle, name: "posts")
    /// Image `rfq active`.
    static let rfqActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "rfq active")
    /// Image `rfq`.
    static let rfq = Rswift.ImageResource(bundle: R.hostingBundle, name: "rfq")
    /// Image `rqst call active`.
    static let rqstCallActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "rqst call active")
    /// Image `rqst call`.
    static let rqstCall = Rswift.ImageResource(bundle: R.hostingBundle, name: "rqst call")
    /// Image `saved item`.
    static let savedItem = Rswift.ImageResource(bundle: R.hostingBundle, name: "saved item")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `select`.
    static let select = Rswift.ImageResource(bundle: R.hostingBundle, name: "select")
    /// Image `send msg active`.
    static let sendMsgActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "send msg active")
    /// Image `send msg`.
    static let sendMsg = Rswift.ImageResource(bundle: R.hostingBundle, name: "send msg")
    /// Image `shopping-cart`.
    static let shoppingCart = Rswift.ImageResource(bundle: R.hostingBundle, name: "shopping-cart")
    /// Image `star active`.
    static let starActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "star active")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `supplier logo`.
    static let supplierLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "supplier logo")
    /// Image `tender active`.
    static let tenderActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "tender active")
    /// Image `tender`.
    static let tender = Rswift.ImageResource(bundle: R.hostingBundle, name: "tender")
    /// Image `unselect`.
    static let unselect = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselect")
    /// Image `video`.
    static let video = Rswift.ImageResource(bundle: R.hostingBundle, name: "video")
    /// Image `website`.
    static let website = Rswift.ImageResource(bundle: R.hostingBundle, name: "website")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Call", bundle: ..., traitCollection: ...)`
    static func call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.call, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Delete post", bundle: ..., traitCollection: ...)`
    static func deletePost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deletePost, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Screen Shot 2022-04-12 at 9.51.08 PM", bundle: ..., traitCollection: ...)`
    static func screenShot20220412At95108PM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.screenShot20220412At95108PM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Screen Shot 2022-04-16 at 10.14.17 AM", bundle: ..., traitCollection: ...)`
    static func screenShot20220416At101417AM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.screenShot20220416At101417AM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Screen Shot 2022-04-16 at 10.18.14 AM", bundle: ..., traitCollection: ...)`
    static func screenShot20220416At101814AM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.screenShot20220416At101814AM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Screen Shot 2022-04-16 at 12.39.35 AM", bundle: ..., traitCollection: ...)`
    static func screenShot20220416At123935AM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.screenShot20220416At123935AM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add comment", bundle: ..., traitCollection: ...)`
    static func addComment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addComment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add to fav", bundle: ..., traitCollection: ...)`
    static func addToFav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addToFav, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addedToFav", bundle: ..., traitCollection: ...)`
    static func addedToFav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addedToFav, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "appLogo", bundle: ..., traitCollection: ...)`
    static func appLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-circle-down", bundle: ..., traitCollection: ...)`
    static func arrowCircleDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowCircleDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-left", bundle: ..., traitCollection: ...)`
    static func arrowLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-left_3", bundle: ..., traitCollection: ...)`
    static func arrowLeft_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowLeft_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back arrow", bundle: ..., traitCollection: ...)`
    static func backArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blue down arrow", bundle: ..., traitCollection: ...)`
    static func blueDownArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blueDownArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart active", bundle: ..., traitCollection: ...)`
    static func cartActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cartActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart no item", bundle: ..., traitCollection: ...)`
    static func cartNoItem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cartNoItem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart", bundle: ..., traitCollection: ...)`
    static func cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "change password", bundle: ..., traitCollection: ...)`
    static func changePassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.changePassword, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close arrow", bundle: ..., traitCollection: ...)`
    static func closeArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "del", bundle: ..., traitCollection: ...)`
    static func del(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.del, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "done", bundle: ..., traitCollection: ...)`
    static func done(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.done, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "drop arrow", bundle: ..., traitCollection: ...)`
    static func dropArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dropArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit_ic", bundle: ..., traitCollection: ...)`
    static func edit_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty-wallet", bundle: ..., traitCollection: ...)`
    static func emptyWallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptyWallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav active", bundle: ..., traitCollection: ...)`
    static func favActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav prod", bundle: ..., traitCollection: ...)`
    static func favProd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favProd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav supplier", bundle: ..., traitCollection: ...)`
    static func favSupplier(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favSupplier, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav", bundle: ..., traitCollection: ...)`
    static func fav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fb", bundle: ..., traitCollection: ...)`
    static func fb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home active", bundle: ..., traitCollection: ...)`
    static func homeActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like", bundle: ..., traitCollection: ...)`
    static func like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "liked", bundle: ..., traitCollection: ...)`
    static func liked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.liked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location", bundle: ..., traitCollection: ...)`
    static func location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout_ic", bundle: ..., traitCollection: ...)`
    static func logout_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mail blue", bundle: ..., traitCollection: ...)`
    static func mailBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mailBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mail", bundle: ..., traitCollection: ...)`
    static func mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minus_ic", bundle: ..., traitCollection: ...)`
    static func minus_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minus_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my msg", bundle: ..., traitCollection: ...)`
    static func myMsg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myMsg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my orders", bundle: ..., traitCollection: ...)`
    static func myOrders(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myOrders, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my pay", bundle: ..., traitCollection: ...)`
    static func myPay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myPay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my posts", bundle: ..., traitCollection: ...)`
    static func myPosts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myPosts, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my tenders", bundle: ..., traitCollection: ...)`
    static func myTenders(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myTenders, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_addresses", bundle: ..., traitCollection: ...)`
    static func no_addresses(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_addresses, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_fav_products", bundle: ..., traitCollection: ...)`
    static func no_fav_products(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_fav_products, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_fav_suppliers", bundle: ..., traitCollection: ...)`
    static func no_fav_suppliers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_fav_suppliers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_orders", bundle: ..., traitCollection: ...)`
    static func no_orders(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_orders, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_payments", bundle: ..., traitCollection: ...)`
    static func no_payments(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_payments, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_tendrs", bundle: ..., traitCollection: ...)`
    static func no_tendrs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_tendrs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notifications", bundle: ..., traitCollection: ...)`
    static func notifications(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notifications, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "off", bundle: ..., traitCollection: ...)`
    static func off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "on", bundle: ..., traitCollection: ...)`
    static func on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "password changed", bundle: ..., traitCollection: ...)`
    static func passwordChanged(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.passwordChanged, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phone active", bundle: ..., traitCollection: ...)`
    static func phoneActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phoneActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phone", bundle: ..., traitCollection: ...)`
    static func phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "picture", bundle: ..., traitCollection: ...)`
    static func picture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.picture, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus_ic", bundle: ..., traitCollection: ...)`
    static func plus_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "posts active", bundle: ..., traitCollection: ...)`
    static func postsActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.postsActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "posts", bundle: ..., traitCollection: ...)`
    static func posts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.posts, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rfq active", bundle: ..., traitCollection: ...)`
    static func rfqActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rfqActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rfq", bundle: ..., traitCollection: ...)`
    static func rfq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rfq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rqst call active", bundle: ..., traitCollection: ...)`
    static func rqstCallActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rqstCallActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rqst call", bundle: ..., traitCollection: ...)`
    static func rqstCall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rqstCall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "saved item", bundle: ..., traitCollection: ...)`
    static func savedItem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.savedItem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "select", bundle: ..., traitCollection: ...)`
    static func select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.select, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "send msg active", bundle: ..., traitCollection: ...)`
    static func sendMsgActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendMsgActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "send msg", bundle: ..., traitCollection: ...)`
    static func sendMsg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendMsg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shopping-cart", bundle: ..., traitCollection: ...)`
    static func shoppingCart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shoppingCart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star active", bundle: ..., traitCollection: ...)`
    static func starActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "supplier logo", bundle: ..., traitCollection: ...)`
    static func supplierLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.supplierLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tender active", bundle: ..., traitCollection: ...)`
    static func tenderActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tenderActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tender", bundle: ..., traitCollection: ...)`
    static func tender(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tender, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unselect", bundle: ..., traitCollection: ...)`
    static func unselect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video", bundle: ..., traitCollection: ...)`
    static func video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "website", bundle: ..., traitCollection: ...)`
    static func website(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.website, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 81 nibs.
  struct nib {
    /// Nib `AddAddressViewController`.
    static let addAddressViewController = _R.nib._AddAddressViewController()
    /// Nib `AddPostsViewController`.
    static let addPostsViewController = _R.nib._AddPostsViewController()
    /// Nib `AddTenderViewController`.
    static let addTenderViewController = _R.nib._AddTenderViewController()
    /// Nib `AddressTableViewCell`.
    static let addressTableViewCell = _R.nib._AddressTableViewCell()
    /// Nib `AddressesListViewController`.
    static let addressesListViewController = _R.nib._AddressesListViewController()
    /// Nib `AlertViewController`.
    static let alertViewController = _R.nib._AlertViewController()
    /// Nib `CartTableCell`.
    static let cartTableCell = _R.nib._CartTableCell()
    /// Nib `CartViewController`.
    static let cartViewController = _R.nib._CartViewController()
    /// Nib `CategoriesViewController`.
    static let categoriesViewController = _R.nib._CategoriesViewController()
    /// Nib `CategorySuppliersViewController`.
    static let categorySuppliersViewController = _R.nib._CategorySuppliersViewController()
    /// Nib `ChangePasswordViewController`.
    static let changePasswordViewController = _R.nib._ChangePasswordViewController()
    /// Nib `ChooseAddressViewController`.
    static let chooseAddressViewController = _R.nib._ChooseAddressViewController()
    /// Nib `ChoosePaymentWayViewController`.
    static let choosePaymentWayViewController = _R.nib._ChoosePaymentWayViewController()
    /// Nib `DetailsImageCollectionCell`.
    static let detailsImageCollectionCell = _R.nib._DetailsImageCollectionCell()
    /// Nib `EditProfileViewController`.
    static let editProfileViewController = _R.nib._EditProfileViewController()
    /// Nib `EmptyAddressesView`.
    static let emptyAddressesView = _R.nib._EmptyAddressesView()
    /// Nib `EmptyCartView`.
    static let emptyCartView = _R.nib._EmptyCartView()
    /// Nib `EmptyNotificationsView`.
    static let emptyNotificationsView = _R.nib._EmptyNotificationsView()
    /// Nib `EmptyOrdersView`.
    static let emptyOrdersView = _R.nib._EmptyOrdersView()
    /// Nib `EmptyPaymentsView`.
    static let emptyPaymentsView = _R.nib._EmptyPaymentsView()
    /// Nib `EmptyPostsView`.
    static let emptyPostsView = _R.nib._EmptyPostsView()
    /// Nib `EmptyProductsFavView`.
    static let emptyProductsFavView = _R.nib._EmptyProductsFavView()
    /// Nib `EmptySupplierFavView`.
    static let emptySupplierFavView = _R.nib._EmptySupplierFavView()
    /// Nib `EmptyTenders`.
    static let emptyTenders = _R.nib._EmptyTenders()
    /// Nib `FavProductTableViewCell`.
    static let favProductTableViewCell = _R.nib._FavProductTableViewCell()
    /// Nib `FavProductsViewController`.
    static let favProductsViewController = _R.nib._FavProductsViewController()
    /// Nib `FavoriteSuppliersCollectionCell`.
    static let favoriteSuppliersCollectionCell = _R.nib._FavoriteSuppliersCollectionCell()
    /// Nib `FavoriteSuppliersViewController`.
    static let favoriteSuppliersViewController = _R.nib._FavoriteSuppliersViewController()
    /// Nib `FavoritesViewController`.
    static let favoritesViewController = _R.nib._FavoritesViewController()
    /// Nib `FilterByPriceViewController`.
    static let filterByPriceViewController = _R.nib._FilterByPriceViewController()
    /// Nib `FilterSelectionTableCell`.
    static let filterSelectionTableCell = _R.nib._FilterSelectionTableCell()
    /// Nib `FilterSelectionViewController`.
    static let filterSelectionViewController = _R.nib._FilterSelectionViewController()
    /// Nib `HomeDeptCollectionViewCell`.
    static let homeDeptCollectionViewCell = _R.nib._HomeDeptCollectionViewCell()
    /// Nib `HomeOfferCollectionViewCell`.
    static let homeOfferCollectionViewCell = _R.nib._HomeOfferCollectionViewCell()
    /// Nib `HomeViewController`.
    static let homeViewController = _R.nib._HomeViewController()
    /// Nib `ImageCollectionViewCell`.
    static let imageCollectionViewCell = _R.nib._ImageCollectionViewCell()
    /// Nib `LoginAlertViewController`.
    static let loginAlertViewController = _R.nib._LoginAlertViewController()
    /// Nib `LoginViewController`.
    static let loginViewController = _R.nib._LoginViewController()
    /// Nib `MessageTableViewCell`.
    static let messageTableViewCell = _R.nib._MessageTableViewCell()
    /// Nib `MessagesDetailsViewController`.
    static let messagesDetailsViewController = _R.nib._MessagesDetailsViewController()
    /// Nib `MessagesReceverTableViewCell`.
    static let messagesReceverTableViewCell = _R.nib._MessagesReceverTableViewCell()
    /// Nib `MessagesViewController`.
    static let messagesViewController = _R.nib._MessagesViewController()
    /// Nib `MyOrdersViewController`.
    static let myOrdersViewController = _R.nib._MyOrdersViewController()
    /// Nib `MyPostsTableViewCell`.
    static let myPostsTableViewCell = _R.nib._MyPostsTableViewCell()
    /// Nib `MyPostsViewController`.
    static let myPostsViewController = _R.nib._MyPostsViewController()
    /// Nib `NotificationTableViewCell`.
    static let notificationTableViewCell = _R.nib._NotificationTableViewCell()
    /// Nib `NotificationsViewController`.
    static let notificationsViewController = _R.nib._NotificationsViewController()
    /// Nib `OfferCollectionViewCell`.
    static let offerCollectionViewCell = _R.nib._OfferCollectionViewCell()
    /// Nib `OffersViewController`.
    static let offersViewController = _R.nib._OffersViewController()
    /// Nib `OrderCompletedViewController`.
    static let orderCompletedViewController = _R.nib._OrderCompletedViewController()
    /// Nib `OrderDetailsViewController`.
    static let orderDetailsViewController = _R.nib._OrderDetailsViewController()
    /// Nib `OrderSummaryTableCell`.
    static let orderSummaryTableCell = _R.nib._OrderSummaryTableCell()
    /// Nib `OrderSummaryViewController`.
    static let orderSummaryViewController = _R.nib._OrderSummaryViewController()
    /// Nib `OrderTableViewCell`.
    static let orderTableViewCell = _R.nib._OrderTableViewCell()
    /// Nib `PasswordChangedViewController`.
    static let passwordChangedViewController = _R.nib._PasswordChangedViewController()
    /// Nib `PaymentTypeTableCell`.
    static let paymentTypeTableCell = _R.nib._PaymentTypeTableCell()
    /// Nib `PickerTableViewCell`.
    static let pickerTableViewCell = _R.nib._PickerTableViewCell()
    /// Nib `PickerViewController`.
    static let pickerViewController = _R.nib._PickerViewController()
    /// Nib `PostTableViewCell`.
    static let postTableViewCell = _R.nib._PostTableViewCell()
    /// Nib `PostsViewController`.
    static let postsViewController = _R.nib._PostsViewController()
    /// Nib `PriceRequestTableViewCell`.
    static let priceRequestTableViewCell = _R.nib._PriceRequestTableViewCell()
    /// Nib `ProductDetailsViewController`.
    static let productDetailsViewController = _R.nib._ProductDetailsViewController()
    /// Nib `ProductsSearchResultsViewController`.
    static let productsSearchResultsViewController = _R.nib._ProductsSearchResultsViewController()
    /// Nib `ProfileViewController`.
    static let profileViewController = _R.nib._ProfileViewController()
    /// Nib `RegisterViewController`.
    static let registerViewController = _R.nib._RegisterViewController()
    /// Nib `RelatedProductCollectionCell`.
    static let relatedProductCollectionCell = _R.nib._RelatedProductCollectionCell()
    /// Nib `SearchFilterViewController`.
    static let searchFilterViewController = _R.nib._SearchFilterViewController()
    /// Nib `SegmentViewCell`.
    static let segmentViewCell = _R.nib._SegmentViewCell()
    /// Nib `SendMessageViewController`.
    static let sendMessageViewController = _R.nib._SendMessageViewController()
    /// Nib `SplashViewController`.
    static let splashViewController = _R.nib._SplashViewController()
    /// Nib `SupplierDetailsViewController`.
    static let supplierDetailsViewController = _R.nib._SupplierDetailsViewController()
    /// Nib `SupplierInfoViewController`.
    static let supplierInfoViewController = _R.nib._SupplierInfoViewController()
    /// Nib `SupplierPostsViewController`.
    static let supplierPostsViewController = _R.nib._SupplierPostsViewController()
    /// Nib `SupplierProductCategoryCell`.
    static let supplierProductCategoryCell = _R.nib._SupplierProductCategoryCell()
    /// Nib `SupplierProductSearchCollectionCell`.
    static let supplierProductSearchCollectionCell = _R.nib._SupplierProductSearchCollectionCell()
    /// Nib `SupplierProductsViewController`.
    static let supplierProductsViewController = _R.nib._SupplierProductsViewController()
    /// Nib `SupplierSearchResultTableCell`.
    static let supplierSearchResultTableCell = _R.nib._SupplierSearchResultTableCell()
    /// Nib `SupplierSearchResultsViewController`.
    static let supplierSearchResultsViewController = _R.nib._SupplierSearchResultsViewController()
    /// Nib `TenderTableViewCell`.
    static let tenderTableViewCell = _R.nib._TenderTableViewCell()
    /// Nib `TendersViewController`.
    static let tendersViewController = _R.nib._TendersViewController()
    /// Nib `UserSectionView`.
    static let userSectionView = _R.nib._UserSectionView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddAddressViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addAddressViewController) instead")
    static func addAddressViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addAddressViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddPostsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addPostsViewController) instead")
    static func addPostsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addPostsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddTenderViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addTenderViewController) instead")
    static func addTenderViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addTenderViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddressTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addressTableViewCell) instead")
    static func addressTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addressTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddressesListViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addressesListViewController) instead")
    static func addressesListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addressesListViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AlertViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.alertViewController) instead")
    static func alertViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.alertViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CartTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cartTableCell) instead")
    static func cartTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cartTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CartViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cartViewController) instead")
    static func cartViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cartViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategoriesViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoriesViewController) instead")
    static func categoriesViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoriesViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategorySuppliersViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categorySuppliersViewController) instead")
    static func categorySuppliersViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categorySuppliersViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChangePasswordViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.changePasswordViewController) instead")
    static func changePasswordViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.changePasswordViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChooseAddressViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chooseAddressViewController) instead")
    static func chooseAddressViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chooseAddressViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChoosePaymentWayViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.choosePaymentWayViewController) instead")
    static func choosePaymentWayViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.choosePaymentWayViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailsImageCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailsImageCollectionCell) instead")
    static func detailsImageCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailsImageCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EditProfileViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editProfileViewController) instead")
    static func editProfileViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editProfileViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EmptyAddressesView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptyAddressesView) instead")
    static func emptyAddressesView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyAddressesView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EmptyCartView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptyCartView) instead")
    static func emptyCartView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyCartView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EmptyNotificationsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptyNotificationsView) instead")
    static func emptyNotificationsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyNotificationsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EmptyOrdersView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptyOrdersView) instead")
    static func emptyOrdersView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyOrdersView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EmptyPaymentsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptyPaymentsView) instead")
    static func emptyPaymentsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyPaymentsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EmptyPostsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptyPostsView) instead")
    static func emptyPostsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyPostsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EmptyProductsFavView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptyProductsFavView) instead")
    static func emptyProductsFavView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyProductsFavView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EmptySupplierFavView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptySupplierFavView) instead")
    static func emptySupplierFavView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptySupplierFavView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EmptyTenders", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptyTenders) instead")
    static func emptyTenders(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyTenders)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FavProductTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.favProductTableViewCell) instead")
    static func favProductTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.favProductTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FavProductsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.favProductsViewController) instead")
    static func favProductsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.favProductsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FavoriteSuppliersCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.favoriteSuppliersCollectionCell) instead")
    static func favoriteSuppliersCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.favoriteSuppliersCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FavoriteSuppliersViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.favoriteSuppliersViewController) instead")
    static func favoriteSuppliersViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.favoriteSuppliersViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FavoritesViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.favoritesViewController) instead")
    static func favoritesViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.favoritesViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FilterByPriceViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.filterByPriceViewController) instead")
    static func filterByPriceViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterByPriceViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FilterSelectionTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.filterSelectionTableCell) instead")
    static func filterSelectionTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterSelectionTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FilterSelectionViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.filterSelectionViewController) instead")
    static func filterSelectionViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterSelectionViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeDeptCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeDeptCollectionViewCell) instead")
    static func homeDeptCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeDeptCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeOfferCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeOfferCollectionViewCell) instead")
    static func homeOfferCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeOfferCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeViewController) instead")
    static func homeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ImageCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imageCollectionViewCell) instead")
    static func imageCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imageCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoginAlertViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginAlertViewController) instead")
    static func loginAlertViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginAlertViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoginViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginViewController) instead")
    static func loginViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MessageTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.messageTableViewCell) instead")
    static func messageTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messageTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MessagesDetailsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.messagesDetailsViewController) instead")
    static func messagesDetailsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messagesDetailsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MessagesReceverTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.messagesReceverTableViewCell) instead")
    static func messagesReceverTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messagesReceverTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MessagesViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.messagesViewController) instead")
    static func messagesViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messagesViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyOrdersViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myOrdersViewController) instead")
    static func myOrdersViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myOrdersViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyPostsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myPostsTableViewCell) instead")
    static func myPostsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myPostsTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyPostsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myPostsViewController) instead")
    static func myPostsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myPostsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationTableViewCell) instead")
    static func notificationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationsViewController) instead")
    static func notificationsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OfferCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.offerCollectionViewCell) instead")
    static func offerCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offerCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OffersViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.offersViewController) instead")
    static func offersViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offersViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderCompletedViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderCompletedViewController) instead")
    static func orderCompletedViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderCompletedViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderDetailsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderDetailsViewController) instead")
    static func orderDetailsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderDetailsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderSummaryTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderSummaryTableCell) instead")
    static func orderSummaryTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderSummaryTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderSummaryViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderSummaryViewController) instead")
    static func orderSummaryViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderSummaryViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderTableViewCell) instead")
    static func orderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PasswordChangedViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.passwordChangedViewController) instead")
    static func passwordChangedViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.passwordChangedViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PaymentTypeTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentTypeTableCell) instead")
    static func paymentTypeTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentTypeTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PickerTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pickerTableViewCell) instead")
    static func pickerTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pickerTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PickerViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pickerViewController) instead")
    static func pickerViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pickerViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postTableViewCell) instead")
    static func postTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postsViewController) instead")
    static func postsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PriceRequestTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.priceRequestTableViewCell) instead")
    static func priceRequestTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.priceRequestTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductDetailsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productDetailsViewController) instead")
    static func productDetailsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productDetailsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductsSearchResultsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productsSearchResultsViewController) instead")
    static func productsSearchResultsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productsSearchResultsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileViewController) instead")
    static func profileViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RegisterViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.registerViewController) instead")
    static func registerViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.registerViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RelatedProductCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.relatedProductCollectionCell) instead")
    static func relatedProductCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.relatedProductCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchFilterViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchFilterViewController) instead")
    static func searchFilterViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchFilterViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SegmentViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.segmentViewCell) instead")
    static func segmentViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.segmentViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SendMessageViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sendMessageViewController) instead")
    static func sendMessageViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sendMessageViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SplashViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.splashViewController) instead")
    static func splashViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.splashViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SupplierDetailsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supplierDetailsViewController) instead")
    static func supplierDetailsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supplierDetailsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SupplierInfoViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supplierInfoViewController) instead")
    static func supplierInfoViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supplierInfoViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SupplierPostsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supplierPostsViewController) instead")
    static func supplierPostsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supplierPostsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SupplierProductCategoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supplierProductCategoryCell) instead")
    static func supplierProductCategoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supplierProductCategoryCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SupplierProductSearchCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supplierProductSearchCollectionCell) instead")
    static func supplierProductSearchCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supplierProductSearchCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SupplierProductsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supplierProductsViewController) instead")
    static func supplierProductsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supplierProductsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SupplierSearchResultTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supplierSearchResultTableCell) instead")
    static func supplierSearchResultTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supplierSearchResultTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SupplierSearchResultsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supplierSearchResultsViewController) instead")
    static func supplierSearchResultsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supplierSearchResultsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TenderTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tenderTableViewCell) instead")
    static func tenderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tenderTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TendersViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tendersViewController) instead")
    static func tendersViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tendersViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserSectionView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userSectionView) instead")
    static func userSectionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userSectionView)
    }
    #endif

    static func addAddressViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addAddressViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func addPostsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addPostsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func addTenderViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addTenderViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func addressTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddressTableViewCell? {
      return R.nib.addressTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressTableViewCell
    }

    static func addressesListViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addressesListViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func alertViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.alertViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func cartTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CartTableCell? {
      return R.nib.cartTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CartTableCell
    }

    static func cartViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.cartViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func categoriesViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.categoriesViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func categorySuppliersViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.categorySuppliersViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func changePasswordViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.changePasswordViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func chooseAddressViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.chooseAddressViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func choosePaymentWayViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.choosePaymentWayViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func detailsImageCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailsImageCollectionCell? {
      return R.nib.detailsImageCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailsImageCollectionCell
    }

    static func editProfileViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.editProfileViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func emptyAddressesView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.emptyAddressesView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func emptyCartView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.emptyCartView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func emptyNotificationsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.emptyNotificationsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func emptyOrdersView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.emptyOrdersView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func emptyPaymentsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.emptyPaymentsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func emptyPostsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.emptyPostsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func emptyProductsFavView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.emptyProductsFavView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func emptySupplierFavView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.emptySupplierFavView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func emptyTenders(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.emptyTenders.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func favProductTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FavProductTableViewCell? {
      return R.nib.favProductTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FavProductTableViewCell
    }

    static func favProductsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.favProductsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func favoriteSuppliersCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FavoriteSuppliersCollectionCell? {
      return R.nib.favoriteSuppliersCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FavoriteSuppliersCollectionCell
    }

    static func favoriteSuppliersViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.favoriteSuppliersViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func favoritesViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.favoritesViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func filterByPriceViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.filterByPriceViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func filterSelectionTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FilterSelectionTableCell? {
      return R.nib.filterSelectionTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterSelectionTableCell
    }

    static func filterSelectionViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.filterSelectionViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func homeDeptCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeDeptCollectionViewCell? {
      return R.nib.homeDeptCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeDeptCollectionViewCell
    }

    static func homeOfferCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeOfferCollectionViewCell? {
      return R.nib.homeOfferCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeOfferCollectionViewCell
    }

    static func homeViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.homeViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func imageCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageCollectionViewCell? {
      return R.nib.imageCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageCollectionViewCell
    }

    static func loginAlertViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loginAlertViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func loginViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loginViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func messageTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MessageTableViewCell? {
      return R.nib.messageTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessageTableViewCell
    }

    static func messagesDetailsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.messagesDetailsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func messagesReceverTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MessagesReceverTableViewCell? {
      return R.nib.messagesReceverTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessagesReceverTableViewCell
    }

    static func messagesViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.messagesViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func myOrdersViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.myOrdersViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func myPostsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPostsTableViewCell? {
      return R.nib.myPostsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPostsTableViewCell
    }

    static func myPostsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.myPostsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func notificationTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationTableViewCell? {
      return R.nib.notificationTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTableViewCell
    }

    static func notificationsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.notificationsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func offerCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferCollectionViewCell? {
      return R.nib.offerCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferCollectionViewCell
    }

    static func offersViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.offersViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func orderCompletedViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.orderCompletedViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func orderDetailsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.orderDetailsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func orderSummaryTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderSummaryTableCell? {
      return R.nib.orderSummaryTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderSummaryTableCell
    }

    static func orderSummaryViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.orderSummaryViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func orderTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderTableViewCell? {
      return R.nib.orderTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderTableViewCell
    }

    static func passwordChangedViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.passwordChangedViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func paymentTypeTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentTypeTableCell? {
      return R.nib.paymentTypeTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentTypeTableCell
    }

    static func pickerTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PickerTableViewCell? {
      return R.nib.pickerTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PickerTableViewCell
    }

    static func pickerViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.pickerViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func postTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostTableViewCell? {
      return R.nib.postTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostTableViewCell
    }

    static func postsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.postsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func priceRequestTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PriceRequestTableViewCell? {
      return R.nib.priceRequestTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PriceRequestTableViewCell
    }

    static func productDetailsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.productDetailsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func productsSearchResultsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.productsSearchResultsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func profileViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.profileViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func registerViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.registerViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func relatedProductCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RelatedProductCollectionCell? {
      return R.nib.relatedProductCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RelatedProductCollectionCell
    }

    static func searchFilterViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.searchFilterViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func segmentViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SegmentViewCell? {
      return R.nib.segmentViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SegmentViewCell
    }

    static func sendMessageViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.sendMessageViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func splashViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.splashViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func supplierDetailsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.supplierDetailsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func supplierInfoViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.supplierInfoViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func supplierPostsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.supplierPostsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func supplierProductCategoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupplierProductCategoryCell? {
      return R.nib.supplierProductCategoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupplierProductCategoryCell
    }

    static func supplierProductSearchCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupplierProductSearchCollectionCell? {
      return R.nib.supplierProductSearchCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupplierProductSearchCollectionCell
    }

    static func supplierProductsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.supplierProductsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func supplierSearchResultTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupplierSearchResultTableCell? {
      return R.nib.supplierSearchResultTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupplierSearchResultTableCell
    }

    static func supplierSearchResultsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.supplierSearchResultsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func tenderTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TenderTableViewCell? {
      return R.nib.tenderTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TenderTableViewCell
    }

    static func tendersViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.tendersViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func userSectionView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.userSectionView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddAddressViewController.validate()
      try _AddPostsViewController.validate()
      try _AddTenderViewController.validate()
      try _AddressTableViewCell.validate()
      try _CartTableCell.validate()
      try _ChangePasswordViewController.validate()
      try _EditProfileViewController.validate()
      try _EmptyAddressesView.validate()
      try _EmptyCartView.validate()
      try _EmptyNotificationsView.validate()
      try _EmptyOrdersView.validate()
      try _EmptyPaymentsView.validate()
      try _EmptyPostsView.validate()
      try _EmptyProductsFavView.validate()
      try _EmptySupplierFavView.validate()
      try _EmptyTenders.validate()
      try _FavProductTableViewCell.validate()
      try _FilterByPriceViewController.validate()
      try _FilterSelectionTableCell.validate()
      try _FilterSelectionViewController.validate()
      try _HomeDeptCollectionViewCell.validate()
      try _HomeOfferCollectionViewCell.validate()
      try _ImageCollectionViewCell.validate()
      try _LoginAlertViewController.validate()
      try _LoginViewController.validate()
      try _MessagesReceverTableViewCell.validate()
      try _MyOrdersViewController.validate()
      try _MyPostsTableViewCell.validate()
      try _MyPostsViewController.validate()
      try _OffersViewController.validate()
      try _OrderCompletedViewController.validate()
      try _PasswordChangedViewController.validate()
      try _PaymentTypeTableCell.validate()
      try _PickerTableViewCell.validate()
      try _PickerViewController.validate()
      try _PostTableViewCell.validate()
      try _PriceRequestTableViewCell.validate()
      try _ProductDetailsViewController.validate()
      try _ProductsSearchResultsViewController.validate()
      try _ProfileViewController.validate()
      try _RegisterViewController.validate()
      try _SearchFilterViewController.validate()
      try _SendMessageViewController.validate()
      try _SplashViewController.validate()
      try _SupplierDetailsViewController.validate()
      try _SupplierInfoViewController.validate()
      try _SupplierProductSearchCollectionCell.validate()
      try _SupplierSearchResultTableCell.validate()
      try _SupplierSearchResultsViewController.validate()
      try _UserSectionView.validate()
    }

    struct _AddAddressViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddAddressViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "drop arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'drop arrow' is used in nib 'AddAddressViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'AddAddressViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'AddAddressViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _AddPostsViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddPostsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "picture", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'picture' is used in nib 'AddPostsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "video", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video' is used in nib 'AddPostsViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'AddPostsViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'AddPostsViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SteelGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SteelGrey' is used in nib 'AddPostsViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _AddTenderViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddTenderViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "drop arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'drop arrow' is used in nib 'AddTenderViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'AddTenderViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'AddTenderViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SteelGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SteelGrey' is used in nib 'AddTenderViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _AddressTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddressTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddressTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "select", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'select' is used in nib 'AddressTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unselect", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unselect' is used in nib 'AddressTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'AddressTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'AddressTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _AddressesListViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddressesListViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _AlertViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AlertViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CartTableCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CartTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CartTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CartTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "del", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'del' is used in nib 'CartTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'CartTableCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SteelGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SteelGrey' is used in nib 'CartTableCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CartViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CartViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CategoriesViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CategoriesViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CategorySuppliersViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CategorySuppliersViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ChangePasswordViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ChangePasswordViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "change password", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'change password' is used in nib 'ChangePasswordViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'ChangePasswordViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'ChangePasswordViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ChooseAddressViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ChooseAddressViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ChoosePaymentWayViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ChoosePaymentWayViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DetailsImageCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailsImageCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailsImageCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailsImageCollectionCell
      }

      fileprivate init() {}
    }

    struct _EditProfileViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EditProfileViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appLogo' is used in nib 'EditProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "drop arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'drop arrow' is used in nib 'EditProfileViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'EditProfileViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'EditProfileViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _EmptyAddressesView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EmptyAddressesView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "no_addresses", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'no_addresses' is used in nib 'EmptyAddressesView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EmptyCartView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EmptyCartView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cart no item", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cart no item' is used in nib 'EmptyCartView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EmptyNotificationsView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EmptyNotificationsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "notifications", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'notifications' is used in nib 'EmptyNotificationsView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EmptyOrdersView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EmptyOrdersView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "no_orders", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'no_orders' is used in nib 'EmptyOrdersView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EmptyPaymentsView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EmptyPaymentsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "no_payments", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'no_payments' is used in nib 'EmptyPaymentsView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EmptyPostsView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EmptyPostsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cart no item", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cart no item' is used in nib 'EmptyPostsView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EmptyProductsFavView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EmptyProductsFavView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "no_fav_products", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'no_fav_products' is used in nib 'EmptyProductsFavView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EmptySupplierFavView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EmptySupplierFavView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "no_fav_suppliers", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'no_fav_suppliers' is used in nib 'EmptySupplierFavView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EmptyTenders: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EmptyTenders"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "no_tendrs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'no_tendrs' is used in nib 'EmptyTenders', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FavProductTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FavProductTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FavProductTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FavProductTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Screen Shot 2022-04-16 at 12.39.35 AM", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Screen Shot 2022-04-16 at 12.39.35 AM' is used in nib 'FavProductTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fav prod", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fav prod' is used in nib 'FavProductTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "saved item", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'saved item' is used in nib 'FavProductTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'FavProductTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'FavProductTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _FavProductsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FavProductsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _FavoriteSuppliersCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FavoriteSuppliersCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FavoriteSuppliersCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FavoriteSuppliersCollectionCell
      }

      fileprivate init() {}
    }

    struct _FavoriteSuppliersViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FavoriteSuppliersViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _FavoritesViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FavoritesViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _FilterByPriceViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FilterByPriceViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in nib 'FilterByPriceViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'FilterByPriceViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'FilterByPriceViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SteelGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SteelGrey' is used in nib 'FilterByPriceViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _FilterSelectionTableCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FilterSelectionTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FilterSelectionTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterSelectionTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'off' is used in nib 'FilterSelectionTableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'on' is used in nib 'FilterSelectionTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'FilterSelectionTableCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _FilterSelectionViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FilterSelectionViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in nib 'FilterSelectionViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'FilterSelectionViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SteelGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SteelGrey' is used in nib 'FilterSelectionViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeDeptCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeDeptCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeDeptCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeDeptCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appLogo' is used in nib 'HomeDeptCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeOfferCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeOfferCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeOfferCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeOfferCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appLogo' is used in nib 'HomeOfferCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ImageCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ImageCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Screen Shot 2022-04-16 at 12.39.35 AM", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Screen Shot 2022-04-16 at 12.39.35 AM' is used in nib 'ImageCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "SteelGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SteelGrey' is used in nib 'ImageCollectionViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _LoginAlertViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoginAlertViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 203", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 203' is used in nib 'LoginAlertViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "deepPink", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'deepPink' is used in nib 'LoginAlertViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _LoginViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoginViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "supplier logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'supplier logo' is used in nib 'LoginViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'LoginViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'LoginViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _MessageTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MessageTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MessageTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessageTableViewCell
      }

      fileprivate init() {}
    }

    struct _MessagesDetailsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MessagesDetailsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MessagesReceverTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MessagesReceverTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MessagesReceverTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessagesReceverTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Screen Shot 2022-04-12 at 9.51.08 PM", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Screen Shot 2022-04-12 at 9.51.08 PM' is used in nib 'MessagesReceverTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MessagesViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MessagesViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MyOrdersViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MyOrdersViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "drop arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'drop arrow' is used in nib 'MyOrdersViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'MyOrdersViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _MyPostsTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MyPostsTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPostsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPostsTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Call", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Call' is used in nib 'MyPostsTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Screen Shot 2022-04-12 at 9.51.08 PM", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Screen Shot 2022-04-12 at 9.51.08 PM' is used in nib 'MyPostsTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "add comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add comment' is used in nib 'MyPostsTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'MyPostsTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "liked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'liked' is used in nib 'MyPostsTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mail blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mail blue' is used in nib 'MyPostsTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'MyPostsTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'MyPostsTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SteelGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SteelGrey' is used in nib 'MyPostsTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _MyPostsViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MyPostsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "drop arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'drop arrow' is used in nib 'MyPostsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "picture", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'picture' is used in nib 'MyPostsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "video", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'video' is used in nib 'MyPostsViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'MyPostsViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "IceBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'IceBlue' is used in nib 'MyPostsViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'MyPostsViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SteelGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SteelGrey' is used in nib 'MyPostsViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _NotificationTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NotificationTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTableViewCell
      }

      fileprivate init() {}
    }

    struct _NotificationsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NotificationsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OfferCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OfferCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _OffersViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OffersViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "blue down arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blue down arrow' is used in nib 'OffersViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'OffersViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'OffersViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _OrderCompletedViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderCompletedViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "done", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'done' is used in nib 'OrderCompletedViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'OrderCompletedViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'OrderCompletedViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _OrderDetailsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderDetailsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OrderSummaryTableCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderSummaryTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderSummaryTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderSummaryTableCell
      }

      fileprivate init() {}
    }

    struct _OrderSummaryViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderSummaryViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OrderTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderTableViewCell
      }

      fileprivate init() {}
    }

    struct _PasswordChangedViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PasswordChangedViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "password changed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'password changed' is used in nib 'PasswordChangedViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'PasswordChangedViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'PasswordChangedViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PaymentTypeTableCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PaymentTypeTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentTypeTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentTypeTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "select", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'select' is used in nib 'PaymentTypeTableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unselect", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unselect' is used in nib 'PaymentTypeTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'PaymentTypeTableCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PickerTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PickerTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PickerTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PickerTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Selected' is used in nib 'PickerTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unselected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unselected' is used in nib 'PickerTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PickerViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PickerViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in nib 'PickerViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "buttonsBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'buttonsBlack' is used in nib 'PickerViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "squash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'squash' is used in nib 'PickerViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PostTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PostTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Call", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Call' is used in nib 'PostTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "add comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add comment' is used in nib 'PostTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'PostTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mail blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mail blue' is used in nib 'PostTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'PostTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'PostTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PostsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PostsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PriceRequestTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PriceRequestTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PriceRequestTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PriceRequestTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "drop arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'drop arrow' is used in nib 'PriceRequestTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'PriceRequestTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'PriceRequestTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProductDetailsViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProductDetailsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Call", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Call' is used in nib 'ProductDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "addedToFav", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addedToFav' is used in nib 'ProductDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back arrow' is used in nib 'ProductDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fb", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fb' is used in nib 'ProductDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heart' is used in nib 'ProductDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'location' is used in nib 'ProductDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mail' is used in nib 'ProductDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "minus_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'minus_ic' is used in nib 'ProductDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus_ic' is used in nib 'ProductDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "rfq", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rfq' is used in nib 'ProductDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "rqst call", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rqst call' is used in nib 'ProductDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "saved item", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'saved item' is used in nib 'ProductDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shopping-cart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shopping-cart' is used in nib 'ProductDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "website", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'website' is used in nib 'ProductDetailsViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'ProductDetailsViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "IceBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'IceBlue' is used in nib 'ProductDetailsViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'ProductDetailsViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SteelGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SteelGrey' is used in nib 'ProductDetailsViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProductsSearchResultsViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProductsSearchResultsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "blue down arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blue down arrow' is used in nib 'ProductsSearchResultsViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'ProductsSearchResultsViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'ProductsSearchResultsViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SteelGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SteelGrey' is used in nib 'ProductsSearchResultsViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProfileViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProfileViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appLogo' is used in nib 'ProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit_ic' is used in nib 'ProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "empty-wallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'empty-wallet' is used in nib 'ProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fav prod", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fav prod' is used in nib 'ProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fav supplier", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fav supplier' is used in nib 'ProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'location' is used in nib 'ProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logout_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logout_ic' is used in nib 'ProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "my msg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my msg' is used in nib 'ProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "my orders", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my orders' is used in nib 'ProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "my posts", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my posts' is used in nib 'ProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tender", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tender' is used in nib 'ProfileViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'ProfileViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "IceBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'IceBlue' is used in nib 'ProfileViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'ProfileViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightRed' is used in nib 'ProfileViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _RegisterViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RegisterViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "drop arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'drop arrow' is used in nib 'RegisterViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "supplier logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'supplier logo' is used in nib 'RegisterViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'RegisterViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'RegisterViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _RelatedProductCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RelatedProductCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RelatedProductCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RelatedProductCollectionCell
      }

      fileprivate init() {}
    }

    struct _SearchFilterViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchFilterViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "drop arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'drop arrow' is used in nib 'SearchFilterViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "select", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'select' is used in nib 'SearchFilterViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unselect", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unselect' is used in nib 'SearchFilterViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'SearchFilterViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'SearchFilterViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SteelGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SteelGrey' is used in nib 'SearchFilterViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SegmentViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SegmentViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SegmentViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SegmentViewCell
      }

      fileprivate init() {}
    }

    struct _SendMessageViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SendMessageViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back arrow' is used in nib 'SendMessageViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'SendMessageViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "IceBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'IceBlue' is used in nib 'SendMessageViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'SendMessageViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SplashViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SplashViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Splash-img", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Splash-img' is used in nib 'SplashViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'SplashViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SupplierDetailsViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SupplierDetailsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "add to fav", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add to fav' is used in nib 'SupplierDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "addedToFav", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addedToFav' is used in nib 'SupplierDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back arrow' is used in nib 'SupplierDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in nib 'SupplierDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star active' is used in nib 'SupplierDetailsViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "IceBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'IceBlue' is used in nib 'SupplierDetailsViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'SupplierDetailsViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SupplierInfoViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SupplierInfoViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Call", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Call' is used in nib 'SupplierInfoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fb", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fb' is used in nib 'SupplierInfoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mail' is used in nib 'SupplierInfoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "phone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'phone' is used in nib 'SupplierInfoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "phone active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'phone active' is used in nib 'SupplierInfoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "rfq", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rfq' is used in nib 'SupplierInfoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "rqst call", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rqst call' is used in nib 'SupplierInfoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "rqst call active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rqst call active' is used in nib 'SupplierInfoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "send msg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'send msg' is used in nib 'SupplierInfoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "send msg active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'send msg active' is used in nib 'SupplierInfoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "website", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'website' is used in nib 'SupplierInfoViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'SupplierInfoViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'SupplierInfoViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SteelGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SteelGrey' is used in nib 'SupplierInfoViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SupplierPostsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SupplierPostsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SupplierProductCategoryCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SupplierProductCategoryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupplierProductCategoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupplierProductCategoryCell
      }

      fileprivate init() {}
    }

    struct _SupplierProductSearchCollectionCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SupplierProductSearchCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupplierProductSearchCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupplierProductSearchCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Screen Shot 2022-04-16 at 10.18.14 AM", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Screen Shot 2022-04-16 at 10.18.14 AM' is used in nib 'SupplierProductSearchCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SupplierProductsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SupplierProductsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SupplierSearchResultTableCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SupplierSearchResultTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupplierSearchResultTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupplierSearchResultTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in nib 'SupplierSearchResultTableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star active' is used in nib 'SupplierSearchResultTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SupplierSearchResultsViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SupplierSearchResultsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "blue down arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blue down arrow' is used in nib 'SupplierSearchResultsViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'SupplierSearchResultsViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LightBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LightBlue' is used in nib 'SupplierSearchResultsViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SteelGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SteelGrey' is used in nib 'SupplierSearchResultsViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _TenderTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TenderTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TenderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TenderTableViewCell
      }

      fileprivate init() {}
    }

    struct _TendersViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TendersViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _UserSectionView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UserSectionView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appLogo' is used in nib 'UserSectionView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "notifications", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'notifications' is used in nib 'UserSectionView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in nib 'UserSectionView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkBlue' is used in nib 'UserSectionView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "IceBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'IceBlue' is used in nib 'UserSectionView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "supplier logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'supplier logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
